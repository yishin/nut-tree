import { ClipboardProviderInterface } from "./clipboard-provider.interface";
import { ImageFinderInterface } from "./image-finder.interface";
import { KeyboardProviderInterface } from "./keyboard-provider.interface";
import { MouseProviderInterface } from "./mouse-provider.interface";
import { ScreenProviderInterface } from "./screen-provider.interface";
import { WindowProviderInterface } from "./window-provider.interface";
import { ImageReader } from "./image-reader.type";
import { ImageWriter } from "./image-writer.type";
import { ImageProcessor } from "./image-processor.interface";
import { LogProviderInterface } from "./log-provider.interface";
import { TextFinderInterface } from "./text-finder.interface";
import { WindowFinderInterface } from "./window-finder.interface";
export interface ProviderRegistry {
    getClipboard(): ClipboardProviderInterface;
    registerClipboardProvider(value: ClipboardProviderInterface): void;
    getKeyboard(): KeyboardProviderInterface;
    registerKeyboardProvider(value: KeyboardProviderInterface): void;
    getMouse(): MouseProviderInterface;
    registerMouseProvider(value: MouseProviderInterface): void;
    getScreen(): ScreenProviderInterface;
    registerScreenProvider(value: ScreenProviderInterface): void;
    getWindow(): WindowProviderInterface;
    registerWindowProvider(value: WindowProviderInterface): void;
    getImageFinder(): ImageFinderInterface;
    registerImageFinder(value: ImageFinderInterface): void;
    getImageReader(): ImageReader;
    registerImageReader(value: ImageReader): void;
    getImageWriter(): ImageWriter;
    registerImageWriter(value: ImageWriter): void;
    getImageProcessor(): ImageProcessor;
    registerImageProcessor(value: ImageProcessor): void;
    getLogProvider(): LogProviderInterface;
    registerLogProvider(value: LogProviderInterface): void;
    getTextFinder(): TextFinderInterface;
    registerTextFinder(value: TextFinderInterface): void;
    getWindowFinder(): WindowFinderInterface;
    registerWindowFinder(value: WindowFinderInterface): void;
}
declare class DefaultProviderRegistry implements ProviderRegistry {
    private _clipboard?;
    private _imageFinder?;
    private _keyboard?;
    private _mouse?;
    private _screen?;
    private _window?;
    private _imageReader?;
    private _imageWriter?;
    private _imageProcessor?;
    private _logProvider?;
    private _textFinder?;
    private _windowFinder?;
    getClipboard: () => ClipboardProviderInterface;
    registerClipboardProvider: (value: ClipboardProviderInterface) => void;
    getImageFinder: () => ImageFinderInterface;
    registerImageFinder: (value: ImageFinderInterface) => void;
    getKeyboard: () => KeyboardProviderInterface;
    registerKeyboardProvider: (value: KeyboardProviderInterface) => void;
    getMouse: () => MouseProviderInterface;
    registerMouseProvider: (value: MouseProviderInterface) => void;
    getScreen: () => ScreenProviderInterface;
    registerScreenProvider: (value: ScreenProviderInterface) => void;
    getWindow: () => WindowProviderInterface;
    registerWindowProvider: (value: WindowProviderInterface) => void;
    getTextFinder: () => TextFinderInterface;
    registerTextFinder: (value: TextFinderInterface) => void;
    getWindowFinder: () => WindowFinderInterface;
    registerWindowFinder: (value: WindowFinderInterface) => void;
    getImageReader: () => ImageReader;
    registerImageReader: (value: ImageReader) => void;
    getImageWriter: () => ImageWriter;
    registerImageWriter: (value: ImageWriter) => void;
    getImageProcessor: () => ImageProcessor;
    registerImageProcessor: (value: ImageProcessor) => void;
    getLogProvider: () => LogProviderInterface;
    registerLogProvider: (value: LogProviderInterface) => void;
}
declare const providerRegistry: DefaultProviderRegistry;
export default providerRegistry;
//# sourceMappingURL=provider-registry.class.d.ts.map